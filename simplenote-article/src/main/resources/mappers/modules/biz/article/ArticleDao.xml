<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.xiaoyu.modules.biz.article.dao.ArticleDao">
    <sql id="Base_Column_List">
        a.id as id,
        a.uuid as uuid,
        a.user_id as userId,
        a.title as title,
        a.brief as brief,
        a.create_date as
        createDate
    </sql>

    <select id="count" resultType="java.lang.Integer">
        select count(*)
        from biz_article
        where del_flag=0
    </select>

    <select id="get" resultType="com.xiaoyu.modules.biz.article.entity.Article"
        parameterType="com.xiaoyu.modules.biz.article.entity.Article">
        select
        <include refid="Base_Column_List" />
        from biz_article as a
        where a.uuid = #{uuid}
        and a.del_flag=0
    </select>

    <select id="getForUpdate" parameterType="java.lang.String"
        resultType="com.xiaoyu.modules.biz.article.entity.Article">
        select
        <include refid="Base_Column_List" />
        from biz_article as a
        where a.uuid = #{uuid}
        for update
    </select>

    <select id="getById" parameterType="java.lang.String"
        resultType="com.xiaoyu.modules.biz.article.entity.Article">
        select
        <include refid="Base_Column_List" />
        from
        biz_article as a
        where a.id = #{id}
        and a.del_flag=0
    </select>

    <select id="getByUuid" parameterType="java.lang.String"
        resultType="com.xiaoyu.modules.biz.article.entity.Article">
        select
        <include refid="Base_Column_List" />
        from
        biz_article as a
        where
        a.uuid = #{uuid}
        and a.del_flag=0
    </select>

    <select id="getVoByUuid" parameterType="java.lang.String"
        resultType="com.xiaoyu.modules.biz.article.vo.ArticleVo">
        select
        <include refid="Base_Column_List" />
        ,t.read_num as 'attr.readNum',
        t.collect_num as 'attr.collectNum',
        t.like_num as
        'attr.likeNum',
        t.comment_num as 'attr.commentNum'
        from
        biz_article as a
        join
        biz_article_attr as
        t
        on
        t.article_id=a.uuid
        where
        a.uuid = #{uuid} and
        a.del_flag=0
    </select>

    <select id="getContentByArticleId" parameterType="java.lang.String"
        resultType="com.xiaoyu.modules.biz.article.vo.ArticleContentVo">
        select
        a.article_id,a.content
        from
        biz_article_content as a
        where
        a.article_id=#{articleId}
    </select>

    <select id="findContentByArticleIds" parameterType="java.lang.String"
        resultType="com.xiaoyu.modules.biz.article.vo.ArticleContentVo">
        select
        a.article_id,a.content
        from
        biz_article_content as a
        where
        a.article_id in
        <foreach collection="articleIds" item="item" index="index" open="(" close=")"
            separator=",">
            #{item}
        </foreach>
    </select>

    <select id="findByList" resultType="com.xiaoyu.modules.biz.article.entity.Article"
        parameterType="com.xiaoyu.common.base.CommonQuery">
        select
        <include refid="Base_Column_List" />
        from biz_article as a
        where a.del_flag=0
        <if test="userId != null">
            and a.user_id=#{userId}
        </if>
        <if test="articleIds != null">
            and uuid in
            <foreach collection="articleIds" item="item" index="index" open="(" close=")"
                separator=",">
                #{item}
            </foreach>
        </if>
        order by a.create_date desc
    </select>

    <select id="findByColumn" resultType="com.xiaoyu.modules.biz.article.vo.ArticleVo"
        parameterType="com.xiaoyu.modules.biz.article.entity.ArticleColumn">
        select
        a.id as id,
        a.uuid as uuid,
        a.user_id as userId,
        a.title as title,
        a.create_date as
        createDate
        from biz_article as a
        join biz_article_column as ac
        on
        ac.user_id=a.user_id
        and
        ac.uuid = a.column_id
        where a.del_flag=0
        and a.user_id=#{userId}
        and
        a.column_id=#{uuid}
        <if test="isOpen !=null">
            and ac.is_open=#{isOpen}
        </if>
        order by a.create_date desc
    </select>

    <select id="findLatestOfUsers" resultType="com.xiaoyu.modules.biz.article.vo.ArticleVo">
        SELECT
        any_value(a.id) as id,
        any_value(a.uuid) as uuid,
        a.user_id as userId,
        any_value(a.title) as title,
        any_value(a.create_date) as createDate,
        any_value(u.avatar) as
        'user.avatar',
        any_value(u.signature) as 'user.signature',
        any_value(u.nickname) as
        'user.nickname',
        any_value(t.read_num) as 'attr.readNum',
        any_value(t.collect_num) as
        'attr.collectNum',
        any_value(t.like_num) as 'attr.likeNum',
        any_value(t.comment_num) as
        'attr.commentNum'
        from
        biz_article as a
        join biz_user as u
        on
        u.uuid = a.user_id
        join
        biz_article_attr as t
        on
        t.article_id=a.uuid
        WHERE
        a.del_flag = 0 and
        <foreach item="item" index="index" collection="array" open="(" separator="or"
            close=")">
            a.user_id =#{item}
        </foreach>
        group by a.user_id
        order by createDate desc
    </select>

    <select id="findHotList" resultType="com.xiaoyu.modules.biz.article.vo.ArticleVo">
        select
        <include refid="Base_Column_List" />
        ,t.read_num as 'attr.readNum',
        t.collect_num as 'attr.collectNum',
        t.like_num as
        'attr.likeNum',
        t.comment_num as 'attr.commentNum'
        from
        biz_article as a
        join
        biz_article_attr as
        t
        on
        t.article_id=a.uuid
        where a.del_flag=0
        order by
        a.create_date
        desc
    </select>

    <select id="findByListWithAttr" resultType="com.xiaoyu.modules.biz.article.vo.ArticleVo"
        parameterType="java.lang.String">
        select
        <include refid="Base_Column_List" />
        ,t.read_num as 'attr.readNum',
        t.collect_num as 'attr.collectNum',
        t.like_num as
        'attr.likeNum',
        t.comment_num as 'attr.commentNum'
        from
        biz_article as a
        join
        biz_article_attr as
        t
        on
        t.article_id=a.uuid
        where a.del_flag=0
        <if test="userId != null">
            and a.user_id=#{userId}
        </if>
        order by a.create_date desc
    </select>

    <select id="findCollectList" resultType="com.xiaoyu.modules.biz.article.vo.ArticleVo"
        parameterType="java.lang.String">
        select
        <include refid="Base_Column_List" />
        ,t.read_num as 'attr.readNum',
        t.collect_num as 'attr.collectNum',
        t.like_num as
        'attr.likeNum',
        t.comment_num as 'attr.commentNum'
        from
        biz_article as a
        join
        biz_article_attr as
        t
        on
        t.article_id=a.uuid
        join biz_article_collect as ac
        on
        ac.article_id=a.uuid
        where
        a.del_flag=0
        and ac.user_id=#{userId}
        and ac.status=1
        order by a.create_date desc
    </select>

    <delete id="delete" parameterType="com.xiaoyu.modules.biz.article.entity.Article">
        update biz_article set
        del_flag=1
        where uuid = #{uuid}
    </delete>

    <insert id="insert" parameterType="com.xiaoyu.modules.biz.article.entity.Article">
        insert into biz_article
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="uuid != null">
                uuid,
            </if>
            <if test="userId != null">
                user_id,
            </if>
            <if test="title != null">
                title,
            </if>
            <if test="brief != null">
                brief,
            </if>
            <if test="createDate != null">
                create_date,
            </if>
            <if test="updateDate != null">
                update_date,
            </if>
            <if test="delFlag != null">
                del_flag,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="uuid != null">
                #{uuid},
            </if>
            <if test="userId != null">
                #{userId},
            </if>
            <if test="title != null">
                #{title},
            </if>
            <if test="brief != null">
                #{brief},
            </if>
            <if test="createDate != null">
                #{createDate},
            </if>
            <if test="updateDate != null">
                #{updateDate},
            </if>
            <if test="delFlag != null">
                #{delFlag},
            </if>
        </trim>
    </insert>
    <insert id="insertContent"
        parameterType="com.xiaoyu.modules.biz.article.vo.ArticleContentVo">
        insert into biz_article_content
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="articleId != null">
                article_id,
            </if>
            <if test="content != null">
                content,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="articleId != null">
                #{articleId},
            </if>
            <if test="content != null">
                #{content},
            </if>
        </trim>
    </insert>

    <update id="update" parameterType="com.xiaoyu.modules.biz.article.entity.Article">
        update biz_article
        <set>
            <if test="userId != null">
                user_id = #{userId},
            </if>
            <if test="title != null">
                title = #{title},
            </if>
            <if test="brief != null">
                brief=#{brief},
            </if>
            <if test="columnId != null">
                column_id = #{columnId},
            </if>
            <if test="updateDate != null">
                update_date = #{updateDate},
            </if>
            <if test="delFlag != null">
                del_flag = #{delFlag},
            </if>
        </set>
        where uuid = #{uuid}
    </update>

    <update id="updateContent"
        parameterType="com.xiaoyu.modules.biz.article.vo.ArticleContentVo">
        update biz_article_content
        <set>
            <if test="content != null">
                content = #{content},
            </if>
        </set>
        where article_id = #{articleId}
    </update>

    <select id="isExist" parameterType="java.lang.String" resultType="java.lang.Integer">
        select count(*)
        from
        biz_article
        where uuid=#{uuid}
        and del_flag=0
    </select>

</mapper>